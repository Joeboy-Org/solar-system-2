name: Solar System Workflow

on:
     workflow_dispatch:
     push:
        branches:
            - main
            - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
                - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
            # max-parallel: 1
            matrix:
                os: [ubuntu-latest]
                node-version: [18, 20]
                exclude:
                  - node-version: 18
                    os: macos-latest
        runs-on: ${{matrix.os}}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Set Node JS Version - ${{matrix.node-version}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{matrix.node-version}}

            - name: Cache NPM dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            
            - name: Install Dependencies
              run: npm install

            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test

            - name: Archive Test Results
              if: always()
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Results
                path: test-results.xml
                ## overwrite: true

    code-coverage:
        name: Code Coverage
        container:
            image: node:18
        services:
            mongodb:
                image: siddharth67/mongo-db:non-prod
                options:
                    --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            # - name: Set Node JS Version - 18
            #   uses: actions/setup-node@v3
            #   with:
            #     node-version: 18
            
            - name: Cache NPM dependencies    #cache
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            
            - name: Install Dependencies
              run: npm install

            - name: Check Code Coverage
              continue-on-error: true
              run: npm run coverage

            - name: Archive Test Results
              uses: actions/upload-artifact@v3
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5

    docker:
          name: Containerization
          needs: [unit-testing, code-coverage]
          permissions:
            packages: write #gives permissions to write images to the packages
          runs-on: ubuntu-latest
          steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: GHCR Login
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Docker Build For Testing
              uses: docker/build-push-action@v4
              with:
                context: "."
                push: false
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            - name: Docker testing
              run: |
                docker images
                docker run --name solar-system-app -d \
                    -p 3000:3000 \
                    -e MONGO_URI=$MONGO_URI \
                    -e MONGO_USERNAME=$MONGO_USERNAME \
                    -e MONGO_PASSWORD=$MONGO_PASSWORD \
                    ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

                export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                echo $IP

                echo Testing IMAGE URL using wget
                wget -q -O - 127.0.0.1:3000/live | grep live

            - name: Container Registry Push
              uses: docker/build-push-action@v4
              with:
                context: "."
                push: true
                tags: |
                 ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                 ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}


    dev-deploy:
        name: Deploy App to Dev
        needs: docker
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: start minikube
              id: minikube
              uses: medyagh/setup-minikube@latest
          
            
            # - name: Install kubectl CLI
            #   uses: azure/setup-kubectl@v3
            #   with:
            #    version: 'v1.26.0'
            
            # - name: Set KubeConfig file
            #   uses: azure/k8s-set-context@v3
            #   with:
            #    method: kubeconfig
            #    kubeconfig: ${{secrets.KUBECONFIG}}
            
            - name: Fetch Kubernetes Cluster Details
              run: |
                kubectl version --short
                echo -----------------------------------------------
                kubectl get nodes



